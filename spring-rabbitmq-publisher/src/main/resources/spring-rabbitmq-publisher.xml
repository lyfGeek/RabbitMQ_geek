<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!-- 加载配置文件。-->
    <context:property-placeholder location="classpath:rabbitmq.properties"/>

    <!-- 定义 RabbitMQ ConnectionFactory。-->
    <rabbit:connection-factory id="connectionFactory"
                               host="${rabbitmq.host}"
                               port="${rabbitmq.port}"
                               username="${rabbitmq.username}"
                               password="${rabbitmq.password}"
                               virtual-host="${rabbitmq.virtual-host}"
                               publisher-confirms="true"
                               publisher-returns="true"/>

    <!-- 定义管理交换机、队列。-->
    <rabbit:admin connection-factory="connectionFactory"/>

    <!-- 定义持久化队列，不存在则自动创建。
    不绑定到交换机则默认绑定到默认交换机 direct，名称为：""，路由键为队列名称。
    -->
    <!--
        id ~ bean 的名称。
        name ~ queue 的名称。
        auto-declare ~ 自动创建。
        auto-delete ~ 自动删除。最后一个消费者和该队列断开连接后，自动删除队列。
        exclusive ~ 是否独占。
        durable ~ 是否持久化。
    -->
    <rabbit:queue id="spring_queue" name="spring_queue" auto-declare="true"/>

    <!-- ~ ~ ~ ~ ~ ~ ~ ~ 广播；所有队列都能收到消息。 ~ ~ ~ ~ ~ ~ ~ ~ -->
    <!-- 定义广播交换机中的持久化队列，不存在则自动创建。-->
    <rabbit:queue id="spring_fanout_queue_1" name="spring_fanout_queue_1" auto-declare="true"/>

    <!-- 定义广播交换机中的持久化队列，不存在则自动创建。-->
    <rabbit:queue id="spring_fanout_queue_2" name="spring_fanout_queue_2" auto-declare="true"/>

    <!-- 定义广播类型交换机，并绑定上述两个队列。-->
    <rabbit:fanout-exchange id="spring_fanout_exchange" name="spring_fanout_exchange" auto-declare="true">
        <rabbit:bindings>
            <rabbit:binding queue="spring_fanout_queue_1"/>
            <rabbit:binding queue="spring_fanout_queue_2"/>
        </rabbit:bindings>
    </rabbit:fanout-exchange>

    <!--<rabbit:direct-exchange name="aa">-->
    <!--<rabbit:bindings>-->
    <!--&lt;!&ndash; direct 类型的交换机绑定队列。key ~ 路由 key。queue ~ 队列名称。&ndash;&gt;-->
    <!--<rabbit:binding queue="spring_queue" key="xxx"/>-->
    <!--</rabbit:bindings>-->
    <!--</rabbit:direct-exchange>-->

    <!-- ~ ~ ~ ~ ~ ~ ~ ~ 通配符；* 匹配一个单词，# 匹配多个单词。~ ~ ~ ~ ~ ~ ~ ~-->
    <!-- 定义广播交换机中的持久化队列，不存在则自动创建。-->
    <rabbit:queue id="spring_topic_queue_star" name="spring_topic_queue_star" auto-declare="true"/>
    <!-- 定义广播交换机中的持久化队列，不存在则自动创建。-->
    <rabbit:queue id="spring_topic_queue_well" name="spring_topic_queue_well" auto-declare="true"/>
    <!-- 定义广播交换机中的持久化队列，不存在则自动创建。-->
    <rabbit:queue id="spring_topic_queue_well2" name="spring_topic_queue_well2" auto-declare="true"/>

    <rabbit:topic-exchange id="spring_topic_exchange" name="spring_topic_exchange" auto-declare="true">
        <rabbit:bindings>
            <rabbit:binding pattern="heima.*" queue="spring_topic_queue_star"/>
            <rabbit:binding pattern="heima.#" queue="spring_topic_queue_well"/>
            <rabbit:binding pattern="itcast.#" queue="spring_topic_queue_well2"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!-- 定义 rabbitTemplate 对象操作可以在代码中方便发送消息。-->
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"/>

    <!-- 消息可靠性投递。（生产端）。-->
    <rabbit:queue id="test_queue_confirm" name="test_queue_confirm"/>
    <rabbit:direct-exchange name="test_exchange_confirm">
        <rabbit:bindings>
            <rabbit:binding queue="test_queue_confirm" key="confirm"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!-- ttl。-->
    <rabbit:queue name="test_queue_ttl" id="test_queue_ttl">
        <rabbit:queue-arguments>
            <entry key="x-message-ttl" value="1000000" value-type="java.lang.Integer"/>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <rabbit:topic-exchange name="test_exchange_ttl">
        <rabbit:bindings>
            <rabbit:binding pattern="ttl.#" queue="test_queue_ttl"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!-- 死信队列。
        - 正常的队列（test_queue_dlx）和交换机（test_exchange_dlx）。
        - 死信队列（queue_dlx）和死信交换机（exchange_dlx）。
        - 正常队列绑定死信交换机。
            参数。
                x-dead-letter-exchange      死信交换机名称。
                x-dead-letter-routing-key   发送给死信交换机的 routing key。
    -->
    <!-- 正常的队列（test_queue_dlx）和交换机（test_exchange_dlx）。-->
    <rabbit:queue name="test_queue_dlx" id="test_queue_dlx">
        <!-- 正常队列绑定死信交换机。-->
        <rabbit:queue-arguments>
            <!-- x-dead-letter-exchange ~ 死信交换机名称。-->
            <entry key="x-dead-letter-exchange" value="exchange_dlx"/>
            <!-- x-dead-letter-routing-key ~发送给死信交换机的 routing key。-->
            <entry key="x-dead-letter-routing-key" value="dlx.geek"/>

            <!-- 设置消息过期时间 ttl。-->
            <entry key="x-message-ttl" value="10000" value-type="java.lang.Integer"/>
            <!-- 设置消息队列的长度限制。。-->
            <entry key="x-max-length" value="10" value-type="java.lang.Integer"/>
        </rabbit:queue-arguments>
    </rabbit:queue>
    <rabbit:topic-exchange name="test_exchange_dlx">
        <rabbit:bindings>
            <rabbit:binding pattern="test.dlx.#" queue="test_queue_dlx"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>
    <!-- 死信队列（queue_dlx）和死信交换机（exchange_dlx）。-->
    <rabbit:queue name="queue_dlx" id="queue_dlx"/>
    <rabbit:topic-exchange name="exchange_dlx">
        <rabbit:bindings>
            <rabbit:binding pattern="dlx.#" queue="queue_dlx"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!-- 延迟队列。
            正常交换机（order_exchange）和队列（order_queue）。
            死信交换机（order_exchange_dlx）和队列（order_queue_dlx）。
            绑定 ~ 设置正常队列的过期时间为 30 分钟。
    -->
    <!-- 正常交换机（order_exchange）和队列（order_queue）。-->
    <rabbit:queue id="order_queue" name="order_queue">
        <!-- 绑定 ~ 设置正常队列的过期时间为 30 分钟。-->
        <rabbit:queue-arguments>
            <entry key="x-dead-letter-exchange" value="order_exchange_dlx"/>
            <entry key="x-dead-letter-routing-key" value="dlx.order.cancel"/>
            <entry key="x-message-ttl" value="10000" value-type="java.lang.Integer"/>
        </rabbit:queue-arguments>
    </rabbit:queue>
    <rabbit:topic-exchange name="order_exchange">
        <rabbit:bindings>
            <rabbit:binding pattern="order.#" queue="order_queue"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!-- 死信交换机（order_exchange_dlx）和队列（order_queue_dlx）。-->
    <rabbit:queue id="order_queue_dlx" name="order_queue_dlx"/>
    <rabbit:topic-exchange name="order_exchange_dlx">
        <rabbit:bindings>
            <rabbit:binding pattern="dlx.order.#" queue="order_queue_dlx"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>
</beans>
